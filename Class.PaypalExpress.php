<?php/** * @uses      Paypal Express Checkout Class * @author    Adarsh Kurudi * @version   0.01 * @access    Public */class PaypalExpress {  /**   * @uses    Holds the paypal sandbox server address - (test or live).   * @access  Private   * @var     String   */	private $posturl = '';		  /**   * @uses    Your API username for the sandbox server.   * @access  Private   * @var     String   */    private $user = '';		  /**   * @uses    Your API password for the sandbox server.   * @access  Private   * @var     String   */	private $pwd = '';	  /**   * @uses    Your API signature for the sandbox server.   * @access  Private   * @var     String   */	private $sig = '';		  /**   * @uses    Paypal version number.   * @access  Private   * @var     String   */	private $ver = '0';		  /**   * @uses    Payment action for the transaction (Authorization, Sale or Order).   * @access  Private   * @var     String   */    private $type = '';		  /**   * @uses    Amount of the order including shipping, handling and tax.   * @access  Private   * @var     Integer   */    private $amt = '0';		  /**   * @uses    The URL to which the buyer is redirected after he logs in and approves the transaction.   * @access  Private   * @var     String   */    private $returnurl = '';		  /**   * @uses    The URL to which the buyer is redirected if he does not approve the transaction.   * @access  Private   * @var     String   */    private $cancelurl = '';		  /**   * @uses    Type of API operation being invoked (SetExpressCheckout, GetExpressCheckoutDetails or DoExpressCheckoutPayment).   * @access  Private   * @var     String   */	private $method = '';	  /**   * @uses    Holds the post parameters. (The API operation, version, and API signature for the request).   * @access  Private   * @var     String   */	private $param;	  /**   * @uses    Stores the response from the sandbox server.   * @access  Private   * @var     String   */    private $ch;		  /**   * @uses      Constructor - User paramters with return URL and Cancel URL required to invoke the APIs.   * @access    Public   * @param     String $user - Your API username for the sandbox server.   * @param     String $pwd - Your API password for the sandbox server.   * @param     String $sig - Your API signature for the sandbox server.   * @param     String $ver - Paypal version number.   * @param     String $amt - Amount of the order including shipping, handling and tax.   * @param     String $returnurl - The URL to which the buyer is redirected after he logs in and approves the transaction.   * @param     String $cancelurl - The URL to which the buyer is redirected if he does not approve the transaction.   * @return    None.   */ 	public function __construct($user = '',$pwd = '',$sig = '',$ver = '',$amt = '',$returnurl = '',$cancelurl = '') {		$this->user = urlencode($user);		$this->pwd = urlencode($pwd);		$this->sig = urlencode($sig);		$this->ver = urlencode($ver);		$this->amt = urlencode($amt);		$this->returnurl = urlencode($returnurl);		$this->cancelurl = urlencode($cancelurl);	}		  /**   * @uses      Destructor.   * @access    Public   * @param     None.   * @return    None.   */	public function __destruct() {		unset($this);	}		  /**   * @uses      Sets the posturl to either the test environment or live sandbox URL.   * @access    Public   * @param     String $environment - Sandbox type to invoke.   * @return    None.   */	public function environment($environment = '') {		if(strtolower($environment) == 'test') {			$this->posturl = 'https://api-3t.sandbox.paypal.com/nvp';		}		elseif(strtolower($environment) == 'live') {			$this->posturl = '';		}		}		  /**   * @uses      Sets the transaction type to either sale, authorization or order type.   * @access    Public   * @param     String $type - Type of transactioned being proccessed.   * @return    None.   */	public function transactionType($type = '') {		switch (strtolower($type)) {			case 's' : 				$this->type = 'Sale';				break;			case 'a' : 				$this->type = 'Authorization';				break;			case 'o' : 				$this->type = 'Order';				break;		}	}	  /**   * @uses      Sets the type of API being invoked.   * @access    Public   * @param     String $method - API type to invoke.   * @return    None.   */		public function setMethod($method = '') {		switch (strtolower($method)) {			case 'setexpresscheckout':				$this->method = urlencode($method);				$this->setExpressCheckout();				break;			case 'getexpresscheckoutdetails':				$this->method = urlencode($method);				$this->getExpressCheckout();				break;			case 'doexpresscheckoutpayment':				$this->method = urlencode($method);				$this->doExpressCheckout();				break;		}	}			/*public function display() {		echo "<br />Credentials being used are: <br />".$this->posturl."<br />".$this->user."<br />".$this->pwd."<br />".$this->sig."<br />".$this->ver."<br />".$this->amt."<br />".$this->returnurl."<br />".$this->cancelurl."<br />".$this->method."<br />".$this->type."<br />".$this->param;	}*/		  /**   * @uses      Sets the NVP post parameters to be posted to the sandbox using the SetExpressCheckout API.   * @access    Public   * @param     String $param - Parameters to be appended to the URL as post parameters.   * @return    None.   */	public function setExpressCheckout() {		$this->param="METHOD=$this->method&USER=$this->user&PWD=$this->pwd&SIGNATURE=$this->sig&VERSION=$this->ver&PAYMENTREQUEST_0_PAYMENTACTION=$this->type&PAYMENTREQUEST_0_AMT=$this->amt&RETURNURL=$this->returnurl&CANCELURL=$this->cancelurl";	}		  /**   * @uses      Sets the NVP post parameters to be posted to the sandbox using the GetExpressCheckoutDetails API.   * @access    Public   * @param     String $param - Parameters to be appended to the URL as post parameters.   * @return    None.   */	public function getExpressCheckout() {		$this->param="METHOD=$this->method&USER=$this->user&PWD=$this->pwd&SIGNATURE=$this->sig&VERSION=$this->ver&TOKEN=$this->token";	}		  /**   * @uses      Sets the NVP post parameters to be posted to the sandbox using the DoExpressChecoutPayment API.   * @access    Public   * @param     String $param - Parameters to be appended to the URL as post parameters.   * @return    None.   */	public function doExpressCheckout() {		$this->param="METHOD=$this->method&USER=$this->user&PWD=$this->pwd&SIGNATURE=$this->sig&VERSION=$this->ver&TOKEN=$this->token&PAYMENTREQUEST_0_PAYMENTACTION=$this->type&PAYMENTREQUEST_0_AMT=$this->amt&PAYERID=$this->payerid";	}		  /**   * @uses      Extracts the token and payer ID returned by the server in the return URL.   * @access    Public   * @param     None.   * @return    None.   */	public function get() {		$this->token=$_GET['token']; //Stores the current token number for the transaction		$this->payerid=$_GET['PayerID']; //Stores the current Payer ID for the transaction	}		  /**   * @uses      Initializes the curl functions and fetches the response from the server after posting the parameters.   * @access    Public   * @param     None.   * @return    None.   */	public function paypalProcessing() {	// Uses the CURL library for php to establish a connection,    // submit the post, and fetch the response.		$this->ch=curl_init(); //Initiate Curl operation		curl_setopt($this->ch, CURLOPT_URL, $this->posturl);		curl_setopt($this->ch, CURLOPT_VERBOSE, 1);		curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, FALSE);		curl_setopt($this->ch, CURLOPT_SSL_VERIFYHOST, FALSE);		curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1); // Returns response data instead of TRUE(1)		curl_setopt($this->ch, CURLOPT_FORBID_REUSE, TRUE); //Forces closure of connection when done		curl_setopt($this->ch, CURLOPT_POST, 1); //Data sent as POST		curl_setopt($this->ch, CURLOPT_POSTFIELDS, $this->param); //Send the POST parameters		$this->result=curl_exec($this->ch); // Execute curl post and store results in $this->result		if(!$this->result) {			exit("failed: ".curl_error($this->ch).'('.curl_errno($this->ch).')'); //Check for connection errors and output the error message		}		curl_close($this->ch); //Close Curl connection		//echo $this->result; //Uncomment to check server response message	}		  /**   * @uses      Extracts the response from the server and parses into an array. Calls the appropriate function based on the method being used.   * @access    Public   * @param     None.   * @return    None.   */	public function extractResponse() {		$this->arr=explode('&',$this->result);		$this->arrde=array();		foreach($this->arr as $i) {			array_push($this->arrde,urldecode($i));		}		$this->arrparsed=array();		foreach($this->arrde as $i) {			$this->temp=explode('=',$i);			$this->arrparsed[$this->temp[0]]=$this->temp[1];		}		/*foreach($this->arrparsed as $key => $value) {			echo $key." : ".$value."<br />";		}*/		if((0 == sizeof($this->arrparsed)) || !array_key_exists('ACK', $this->arrparsed)) {			exit("Invalid HTTP Response for POST request to $this->posturl.");		}		if(strtolower($this->method) == 'setexpresscheckout' && strtolower($this->arrparsed['ACK']) == 'success') {			$this->redirect();		}	}		  /**   * @uses      Appends the token number and redirects to the login page.   * @access    Public   * @param     None.   * @return    None.   */	public function redirect() {		$this->token=$this->arrparsed['TOKEN'];		$this->paypal="https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=$this->token";		header("Location: $this->paypal");	}		  /**   * @uses      Displays certain information retrieved from the server to the user.    * @access    Public   * @param     None.   * @return    None.   */		public function displayDetails() {		if(strtolower($this->method) == 'getexpresscheckoutdetails') {			echo "<b>Please confirm Shipping Details:</b> <br />";			echo "<b>First Name: </b>". $this->arrparsed['FIRSTNAME']."<br />";			echo "<b>Last Name: </b>". $this->arrparsed['LASTNAME']."<br />";			echo "<b>Ship To: </b>". $this->arrparsed['SHIPTONAME']."<br />";			echo "<b>Street: </b>". $this->arrparsed['SHIPTOSTREET']."<br />";			echo "<b>City: </b>". $this->arrparsed['SHIPTOCITY']."<br />";			echo "<b>State: </b>". $this->arrparsed['SHIPTOSTATE']."<br />";			echo "<b>Zip: </b>". $this->arrparsed['SHIPTOZIP']."<br />";			echo "<b>Country: </b>". $this->arrparsed['SHIPTOCOUNTRYNAME']."<br />";			echo "<br /><b>Payment Details:</b> <br />";			echo "<b>Amount: </b>". $this->arrparsed['AMT']."<br />";			echo "<b>Shipping Amount: </b>". $this->arrparsed['SHIPPINGAMT']."<br />";			echo "<b>Handling Amount: </b>". $this->arrparsed['HANDLINGAMT']."<br />";			echo "<b>Tax: </b>". $this->arrparsed['TAXAMT']."<br />";			echo "<b>Insurance: </b>". $this->arrparsed['INSURANCEAMT']."<br />";			echo "<b>Total: </b>". $this->arrparsed['PAYMENTREQUEST_0_AMT']."<br /><br />";			echo "<b><a href=\"confirm.php?token=$this->token&PayerID=$this->payerid\">PAY</a></b>";		}		elseif(strtolower($this->method) == 'doexpresscheckoutpayment') {			if($this->arrparsed['ACK']=='Success') {				echo "<center>Your order is confirmed. Thank you!!</center>";			}			else {				echo "There was a problem with your order processing. ".$this->arrparsed['L_LONGMESSAGE0'];			}		}	}}?>